// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"binance_bot/internal/api/http/v1"
	"binance_bot/internal/clients/telegram"
	"binance_bot/internal/config"
	"binance_bot/internal/consumer/eventconsumer"
	telegram2 "binance_bot/internal/events/telegram"
	"binance_bot/internal/serviceprovider"
	"binance_bot/internal/usecase"
	"binance_bot/internal/webapi"
	"binance_bot/pkg/application"
)

// Injectors from wire.go:

func newApp() (*application.App, func(), error) {
	configConfig, err := config.GetConfig()
	if err != nil {
		return nil, nil, err
	}
	buildVersion, err := application.GetBuildVersion()
	if err != nil {
		return nil, nil, err
	}
	logger := serviceprovider.NewLogger(configConfig, buildVersion)
	engine := serviceprovider.NewBaseRouter(configConfig, logger, buildVersion)
	leaderBoard := webapi.NewWebData(logger, configConfig)
	client := telegram.NewClient(configConfig)
	usecaseLeaderBoard := usecase.NewLeaderBoard(leaderBoard, logger, client, configConfig)
	handler := v1.NewRouter(engine, logger, usecaseLeaderBoard)
	server := serviceprovider.NewHttp(handler, configConfig, logger)
	blockchain := webapi.NewBlockchain(logger, configConfig)
	whaleHome := usecase.NewWhaleHome(logger, blockchain)
	whaleWatcher := usecase.NewWhaleWatcher(whaleHome, logger, client, configConfig)
	processor := telegram2.NewProcessor(client, usecaseLeaderBoard, whaleHome)
	consumer := eventconsumer.NewConsumer(processor, configConfig, logger)
	app := createApp(server, configConfig, logger, whaleWatcher, consumer)
	return app, func() {
	}, nil
}
